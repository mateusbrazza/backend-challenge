name: 02-ELKStack
on:
  push:
    branches:
      - main
jobs:
  deploy-elkstack:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TFC_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan
        continue-on-error: true

      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -auto-approve

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: us-east-1

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Install kubectl
        run: sudo apt-get install -y kubectl

      - name: Configure kubectl for AWS EKS
        run: aws eks update-kubeconfig --name module-eks-CPxup

      - name: Wait for Resources
        run: sleep 30

      - name: Deploy ELK Stack
        run: |
          cd modules/elk
          kubectl config view
          kubectl apply -f . --validate=false

      - name: Verify kubectl configuration
        run: kubectl get svc -n elk

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: adopt

      - name: Run Tests
        run: mvn test

      - name: Build with Maven
        run: mvn clean install

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: mateusbrazza/public-case-jwt:latest

      - name: Update Deployment Image
        run: kubectl set image deployment/public-case-jwt public-case-jwt=mateusbrazza/public-case-jwt:latest -n elk

      - name: Check and Update Service
        run: |
          if kubectl get svc public-case-jwt -n elk; then
            echo "Service exists. Updating service settings if necessary."
            
          else
            echo "Service does not exist. Creating one."
            kubectl expose deployment public-case-jwt --type=LoadBalancer --port=8080 -n elk
          fi

      - name: Check Deployment Status
        run: |
          kubectl rollout status deployment/public-case-jwt -n elk
